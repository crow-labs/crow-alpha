// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: whitelist/whitelist.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type User struct {
	Id               uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address          string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Status           string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	PendingOrderIds  []uint64 `protobuf:"varint,4,rep,packed,name=pendingOrderIds,proto3" json:"pendingOrderIds,omitempty"`
	PreviousOrderIds []uint64 `protobuf:"varint,5,rep,packed,name=previousOrderIds,proto3" json:"previousOrderIds,omitempty"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_2235d805cc8f0fe2, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *User) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *User) GetPendingOrderIds() []uint64 {
	if m != nil {
		return m.PendingOrderIds
	}
	return nil
}

func (m *User) GetPreviousOrderIds() []uint64 {
	if m != nil {
		return m.PreviousOrderIds
	}
	return nil
}

type Producer struct {
	Id               uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address          string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Status           string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	ListingIds       []uint64 `protobuf:"varint,4,rep,packed,name=listingIds,proto3" json:"listingIds,omitempty"`
	PendingOrderIds  []uint64 `protobuf:"varint,5,rep,packed,name=pendingOrderIds,proto3" json:"pendingOrderIds,omitempty"`
	PreviousOrderIds []uint64 `protobuf:"varint,6,rep,packed,name=previousOrderIds,proto3" json:"previousOrderIds,omitempty"`
}

func (m *Producer) Reset()         { *m = Producer{} }
func (m *Producer) String() string { return proto.CompactTextString(m) }
func (*Producer) ProtoMessage()    {}
func (*Producer) Descriptor() ([]byte, []int) {
	return fileDescriptor_2235d805cc8f0fe2, []int{1}
}
func (m *Producer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Producer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Producer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Producer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Producer.Merge(m, src)
}
func (m *Producer) XXX_Size() int {
	return m.Size()
}
func (m *Producer) XXX_DiscardUnknown() {
	xxx_messageInfo_Producer.DiscardUnknown(m)
}

var xxx_messageInfo_Producer proto.InternalMessageInfo

func (m *Producer) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Producer) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Producer) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Producer) GetListingIds() []uint64 {
	if m != nil {
		return m.ListingIds
	}
	return nil
}

func (m *Producer) GetPendingOrderIds() []uint64 {
	if m != nil {
		return m.PendingOrderIds
	}
	return nil
}

func (m *Producer) GetPreviousOrderIds() []uint64 {
	if m != nil {
		return m.PreviousOrderIds
	}
	return nil
}

type Whitelist struct {
	Users     []User     `protobuf:"bytes,1,rep,name=users,proto3" json:"users"`
	Producers []Producer `protobuf:"bytes,2,rep,name=producers,proto3" json:"producers"`
}

func (m *Whitelist) Reset()         { *m = Whitelist{} }
func (m *Whitelist) String() string { return proto.CompactTextString(m) }
func (*Whitelist) ProtoMessage()    {}
func (*Whitelist) Descriptor() ([]byte, []int) {
	return fileDescriptor_2235d805cc8f0fe2, []int{2}
}
func (m *Whitelist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Whitelist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Whitelist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Whitelist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Whitelist.Merge(m, src)
}
func (m *Whitelist) XXX_Size() int {
	return m.Size()
}
func (m *Whitelist) XXX_DiscardUnknown() {
	xxx_messageInfo_Whitelist.DiscardUnknown(m)
}

var xxx_messageInfo_Whitelist proto.InternalMessageInfo

func (m *Whitelist) GetUsers() []User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *Whitelist) GetProducers() []Producer {
	if m != nil {
		return m.Producers
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "crowlabs.crow.whitelist.User")
	proto.RegisterType((*Producer)(nil), "crowlabs.crow.whitelist.Producer")
	proto.RegisterType((*Whitelist)(nil), "crowlabs.crow.whitelist.Whitelist")
}

func init() { proto.RegisterFile("whitelist/whitelist.proto", fileDescriptor_2235d805cc8f0fe2) }

var fileDescriptor_2235d805cc8f0fe2 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0xcd, 0x4a, 0xc3, 0x40,
	0x10, 0xce, 0xb6, 0x69, 0xb5, 0x23, 0xa8, 0x2c, 0xa2, 0x51, 0x70, 0x8d, 0x3d, 0x05, 0xc5, 0x04,
	0xf4, 0xe4, 0xb5, 0xd0, 0x83, 0x27, 0x25, 0x20, 0x82, 0xb7, 0xb6, 0xbb, 0xa4, 0x0b, 0xb5, 0x1b,
	0x76, 0x36, 0x56, 0x1f, 0x42, 0xf0, 0x09, 0x7c, 0x18, 0x4f, 0x3d, 0xf6, 0xe8, 0x49, 0xa4, 0x7d,
	0x11, 0xd9, 0xf4, 0x4f, 0xd4, 0x80, 0x07, 0x6f, 0xdf, 0xcc, 0x7c, 0xdf, 0x30, 0xdf, 0xcc, 0xc0,
	0xee, 0xa0, 0x2b, 0x8d, 0xe8, 0x49, 0x34, 0xd1, 0x02, 0x85, 0xa9, 0x56, 0x46, 0xd1, 0x9d, 0x8e,
	0x56, 0x83, 0x5e, 0xab, 0x8d, 0xa1, 0x05, 0xe1, 0xa2, 0xbc, 0xb7, 0x95, 0xa8, 0x44, 0xe5, 0x9c,
	0xc8, 0xa2, 0x29, 0xbd, 0xfe, 0x42, 0xc0, 0xbd, 0x46, 0xa1, 0xe9, 0x3a, 0x94, 0x24, 0xf7, 0x88,
	0x4f, 0x02, 0x37, 0x2e, 0x49, 0x4e, 0x3d, 0x58, 0x69, 0x71, 0xae, 0x05, 0xa2, 0x57, 0xf2, 0x49,
	0x50, 0x8b, 0xe7, 0x21, 0xdd, 0x86, 0x2a, 0x9a, 0x96, 0xc9, 0xd0, 0x2b, 0xe7, 0x85, 0x59, 0x44,
	0x03, 0xd8, 0x48, 0x45, 0x9f, 0xcb, 0x7e, 0x72, 0xa9, 0xb9, 0xd0, 0x17, 0x1c, 0x3d, 0xd7, 0x2f,
	0x07, 0x6e, 0xfc, 0x3d, 0x4d, 0x8f, 0x60, 0x33, 0xd5, 0xe2, 0x5e, 0xaa, 0x0c, 0x17, 0xd4, 0x4a,
	0x4e, 0xfd, 0x91, 0xaf, 0xbf, 0x12, 0x58, 0xbd, 0xd2, 0x8a, 0x67, 0x9d, 0x7f, 0x19, 0x92, 0x01,
	0xd8, 0x6d, 0xc8, 0x7e, 0xb2, 0x9c, 0xef, 0x4b, 0xe6, 0x37, 0x13, 0x95, 0xbf, 0x9b, 0xa8, 0x16,
	0x98, 0x78, 0x22, 0x50, 0xbb, 0x99, 0x5f, 0x82, 0x9e, 0x43, 0x25, 0x43, 0xa1, 0xd1, 0x23, 0x7e,
	0x39, 0x58, 0x3b, 0xdd, 0x0f, 0x0b, 0x4e, 0x16, 0xda, 0xc3, 0x34, 0xdc, 0xe1, 0xfb, 0x81, 0x13,
	0x4f, 0x15, 0xb4, 0x09, 0xb5, 0x74, 0xb6, 0x0c, 0x6b, 0xd9, 0xca, 0x0f, 0x0b, 0xe5, 0xf3, 0xb5,
	0xcd, 0x5a, 0x2c, 0x95, 0x8d, 0xe6, 0x70, 0xcc, 0xc8, 0x68, 0xcc, 0xc8, 0xc7, 0x98, 0x91, 0xe7,
	0x09, 0x73, 0x46, 0x13, 0xe6, 0xbc, 0x4d, 0x98, 0x73, 0x7b, 0x9c, 0x48, 0xd3, 0xcd, 0xda, 0x61,
	0x47, 0xdd, 0x45, 0xb6, 0xdd, 0x89, 0x6d, 0x9c, 0xa3, 0xe8, 0x61, 0xf9, 0x6b, 0x91, 0x79, 0x4c,
	0x05, 0xb6, 0xab, 0xf9, 0x0f, 0x9d, 0x7d, 0x06, 0x00, 0x00, 0xff, 0xff, 0x44, 0xda, 0x3e, 0x4a,
	0x8f, 0x02, 0x00, 0x00,
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PreviousOrderIds) > 0 {
		dAtA2 := make([]byte, len(m.PreviousOrderIds)*10)
		var j1 int
		for _, num := range m.PreviousOrderIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintWhitelist(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PendingOrderIds) > 0 {
		dAtA4 := make([]byte, len(m.PendingOrderIds)*10)
		var j3 int
		for _, num := range m.PendingOrderIds {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintWhitelist(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintWhitelist(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Producer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Producer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Producer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PreviousOrderIds) > 0 {
		dAtA6 := make([]byte, len(m.PreviousOrderIds)*10)
		var j5 int
		for _, num := range m.PreviousOrderIds {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintWhitelist(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PendingOrderIds) > 0 {
		dAtA8 := make([]byte, len(m.PendingOrderIds)*10)
		var j7 int
		for _, num := range m.PendingOrderIds {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintWhitelist(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ListingIds) > 0 {
		dAtA10 := make([]byte, len(m.ListingIds)*10)
		var j9 int
		for _, num := range m.ListingIds {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintWhitelist(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintWhitelist(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Whitelist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Whitelist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Whitelist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Producers) > 0 {
		for iNdEx := len(m.Producers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Producers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWhitelist(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWhitelist(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintWhitelist(dAtA []byte, offset int, v uint64) int {
	offset -= sovWhitelist(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWhitelist(uint64(m.Id))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	if len(m.PendingOrderIds) > 0 {
		l = 0
		for _, e := range m.PendingOrderIds {
			l += sovWhitelist(uint64(e))
		}
		n += 1 + sovWhitelist(uint64(l)) + l
	}
	if len(m.PreviousOrderIds) > 0 {
		l = 0
		for _, e := range m.PreviousOrderIds {
			l += sovWhitelist(uint64(e))
		}
		n += 1 + sovWhitelist(uint64(l)) + l
	}
	return n
}

func (m *Producer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWhitelist(uint64(m.Id))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	if len(m.ListingIds) > 0 {
		l = 0
		for _, e := range m.ListingIds {
			l += sovWhitelist(uint64(e))
		}
		n += 1 + sovWhitelist(uint64(l)) + l
	}
	if len(m.PendingOrderIds) > 0 {
		l = 0
		for _, e := range m.PendingOrderIds {
			l += sovWhitelist(uint64(e))
		}
		n += 1 + sovWhitelist(uint64(l)) + l
	}
	if len(m.PreviousOrderIds) > 0 {
		l = 0
		for _, e := range m.PreviousOrderIds {
			l += sovWhitelist(uint64(e))
		}
		n += 1 + sovWhitelist(uint64(l)) + l
	}
	return n
}

func (m *Whitelist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovWhitelist(uint64(l))
		}
	}
	if len(m.Producers) > 0 {
		for _, e := range m.Producers {
			l = e.Size()
			n += 1 + l + sovWhitelist(uint64(l))
		}
	}
	return n
}

func sovWhitelist(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWhitelist(x uint64) (n int) {
	return sovWhitelist(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWhitelist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PendingOrderIds = append(m.PendingOrderIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthWhitelist
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthWhitelist
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PendingOrderIds) == 0 {
					m.PendingOrderIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWhitelist
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PendingOrderIds = append(m.PendingOrderIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingOrderIds", wireType)
			}
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PreviousOrderIds = append(m.PreviousOrderIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthWhitelist
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthWhitelist
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PreviousOrderIds) == 0 {
					m.PreviousOrderIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWhitelist
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PreviousOrderIds = append(m.PreviousOrderIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousOrderIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWhitelist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWhitelist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Producer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWhitelist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Producer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Producer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ListingIds = append(m.ListingIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthWhitelist
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthWhitelist
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ListingIds) == 0 {
					m.ListingIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWhitelist
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ListingIds = append(m.ListingIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ListingIds", wireType)
			}
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PendingOrderIds = append(m.PendingOrderIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthWhitelist
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthWhitelist
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PendingOrderIds) == 0 {
					m.PendingOrderIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWhitelist
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PendingOrderIds = append(m.PendingOrderIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingOrderIds", wireType)
			}
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PreviousOrderIds = append(m.PreviousOrderIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthWhitelist
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthWhitelist
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PreviousOrderIds) == 0 {
					m.PreviousOrderIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWhitelist
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PreviousOrderIds = append(m.PreviousOrderIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousOrderIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWhitelist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWhitelist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Whitelist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWhitelist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Whitelist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Whitelist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Producers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Producers = append(m.Producers, Producer{})
			if err := m.Producers[len(m.Producers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWhitelist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWhitelist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWhitelist(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWhitelist
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWhitelist
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWhitelist
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWhitelist
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWhitelist        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWhitelist          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWhitelist = fmt.Errorf("proto: unexpected end of group")
)
